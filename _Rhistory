library("magrittr")
# library("hms")
library(forecast)
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean()
) %>%
add_lines(y = ~avg, name = "mean", color = I("red"))
}
allCities <- txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities",
hoverinfo = "none")
allCities
allCities %>%
filter(city == "Dallas") %>%
add_lines(name = "Dallas")
allCities %>%
filter(city == "Houston") %>%
add_lines(name = "Houston")
# The problem is that each of these steps on other
# cities selected
# The way to deal with this is the add_fun() command,
# which will not step on previous command results:
allCities %>%
add_fun(function(plot) {
plot %>% filter(city == "Houston") %>% add_lines(name = "Houston")
}) %>%
add_fun(function(plot) {
plot %>% filter(city == "San Antonio") %>%
add_lines(name = "San Antonio")
}) %>%
add_fun(function(plot) {
plot %>% filter(city == "Dallas") %>%
add_lines(name = "Dallas")
})
# reusable function for highlighting a particular city
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
# reusable function for plotting overall median & IQR
layer_iqr <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
q1 = quantile(median, 0.25, na.rm = TRUE),
m = median(median, na.rm = TRUE),
q3 = quantile(median, 0.75, na.rm = TRUE)
) %>%
add_lines(y = ~m, name = "median", color = I("black")) %>%
add_ribbons(ymin = ~q1, ymax = ~q3, name = "IQR", color = I("black"))
}
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean()
) %>%
add_lines(y = ~avg, name = "mean", color = I("red"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")
add_fun(layer_mean)
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean(mean, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("red"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
warnings()
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean(mean, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("red"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean(mean, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("green"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
warnings()
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = median(median, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("green"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = median(mean, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("green"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean(median, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("green"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(median, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(mean, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
# reusable function for plotting overall median & IQR
layer_iqr <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
#     q1 = quantile(median, 0.25, na.rm = TRUE),
m = median(median, na.rm = TRUE),
#      q3 = quantile(median, 0.75, na.rm = TRUE)
) %>%
add_lines(y = ~m, name = "median", color = I("black"))  #   %>%
#    add_ribbons(ymin = ~q1, ymax = ~q3, name = "IQR", color = I("black"))
}
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
# reusable function for plotting overall median & IQR
layer_iqr <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
#     q1 = quantile(median, 0.25, na.rm = TRUE),
m = median(median, na.rm = TRUE),
#      q3 = quantile(median, 0.75, na.rm = TRUE)
) %>%
add_lines(y = ~m, name = "median", color = I("black"))  #   %>%
#    add_ribbons(ymin = ~q1, ymax = ~q3, name = "IQR", color = I("black"))
}
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(median, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(mean, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(median, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
rm(p)
names(allCities)
View(allCities)
View(allCities)
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~mean) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~mean)
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median)
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none")
# reusable function for highlighting a particular city
layer_city <- function(plot, name) {
plot %>% filter(city == name) %>% add_lines(name = name)
}
# reusable function for plotting overall median & IQR
layer_iqr <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
q1 = quantile(median, 0.25, na.rm = TRUE),
m = median(median, na.rm = TRUE),
q3 = quantile(median, 0.75, na.rm = TRUE)
) %>%
add_lines(y = ~m, name = "median", color = I("black"))  %>%
#    add_ribbons(ymin = ~q1, ymax = ~q3, name = "IQR", color = I("black"))
}
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean(median, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("green"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
# A layering function does not have to be a data-plot-pipeline
# itself. Its only requirement on a layering function is
# that the first argument is a plot object and it returns a
# plot object. This provides an opportunity to say,
# fit a model to the plot data, extract the model components
# you desire, and map those components to visuals.
# Furthermore, since plotly’s add_*() functions don’t
# require a data.frame, you can supply those components
# directly to attributes (as long as they are well-defined),
# as done in Figure 1.5 via the forecast package
# (Hyndman, n.d.):
library(forecast)
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(median, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
# reusable function for plotting overall median & IQR
layer_iqr <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
q1 = quantile(median, 0.25, na.rm = TRUE),
m = median(median, na.rm = TRUE),
q3 = quantile(median, 0.75, na.rm = TRUE)
) %>%
add_lines(y = ~m, name = "median", color = I("black"))  %>%
add_ribbons(ymin = ~q1, ymax = ~q3, name = "IQR", color = I("black"))
}
# Barry's attempt at a reusable function for plotting
# overall mean
layer_mean <- function(plot) {
plot %>%
group_by(date) %>%
summarise(
avg = mean(median, na.rm = TRUE)
) %>%
add_lines(y = ~avg, name = "mean", color = I("green"))
}
allCities %>%
add_fun(layer_iqr) %>%
add_fun(layer_city, "Houston") %>%
add_fun(layer_city, "San Antonio")  %>%
add_fun(layer_mean)
# A layering function does not have to be a data-plot-pipeline
# itself. Its only requirement on a layering function is
# that the first argument is a plot object and it returns a
# plot object. This provides an opportunity to say,
# fit a model to the plot data, extract the model components
# you desire, and map those components to visuals.
# Furthermore, since plotly’s add_*() functions don’t
# require a data.frame, you can supply those components
# directly to attributes (as long as they are well-defined),
# as done in Figure 1.5 via the forecast package
# (Hyndman, n.d.):
library(forecast)
layer_forecast <- function(plot) {
d <- plotly_data(plot)
series <- with(d,
ts(median, frequency = 12, start = c(2000, 1), end = c(2015, 7))
)
fore <- forecast(ets(series), h = 48, level = c(80, 95))
plot %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 2],
ymax = fore$upper[, 2], color = I("gray95"),
name = "95% confidence", inherit = FALSE) %>%
add_ribbons(x = time(fore$mean), ymin = fore$lower[, 1],
ymax = fore$upper[, 1], color = I("gray80"),
name = "80% confidence", inherit = FALSE) %>%
add_lines(x = time(fore$mean), y = fore$mean, color = I("blue"),
name = "prediction")
}
txhousing %>%
group_by(city) %>%
plot_ly(x = ~date, y = ~median) %>%
add_lines(alpha = 0.2, name = "Texan Cities", hoverinfo = "none") %>%
add_fun(layer_iqr) %>%
add_fun(layer_forecast)
p <- ggplot(fortify(gold), aes(x, y)) + geom_line()
gg <- ggplotly(p)
layout(gg, dragmode = "pan")
library(rmarkdown)
rangeslider(gg)
library(plotly)
library("ggplot2")
library("dplyr")
library("tidyr")
library("purrr")
library("tibble")
library("stringr")
library("forcats")
library("readxl")
library("readr")
library("lubridate")
library("psych")
library("magrittr")
# library("hms")
library(forecast)
p <- ggplot(fortify(gold), aes(x, y)) + geom_line()
gg <- ggplotly(p)
layout(gg, dragmode = "pan")
# Range sliders
rangeslider(gg)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library("ggplot2")
library("dplyr")
library("tidyr")
library("purrr")
library("tibble")
library("stringr")
library("forcats")
library("readxl")
library("readr")
library("lubridate")
library("psych")
library("magrittr")
# library("hms")
library(forecast)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() + geom_smooth()
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() + geom_smooth()
plotly_json(p)
install.packages("listviewer")
library(listviewer)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() + geom_smooth()
plotly_json(p)
style(p, hoverinfo = "none", traces = 2:3)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() + geom_smooth()
plotly_json(p)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() + geom_smooth()
plotly_json(p)
library(listviewer)
